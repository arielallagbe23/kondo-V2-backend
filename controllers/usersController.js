const db = require("../database");
const { hashPassword, verifyPassword } = require("../users/hashService");
const { encryptData, decryptData } = require("../users/encryptionService");
const jwt = require("jsonwebtoken");
const crypto = require("crypto");

exports.registerUser = async (req, res) => {
    try {
        const { nickname, email, password, password_verif, type_abonnement_id, type_user_id } = req.body;
        console.log("üì© Valeurs re√ßues :", req.body);

        // üî¥ V√©rifier si les mots de passe correspondent
        if (password !== password_verif) {
            console.log("‚ùå Les mots de passe ne correspondent pas.");
            return res.status(400).json({ error: "Les mots de passe ne correspondent pas." });
        }

        // üü° V√©rifier si l'email existe d√©j√†
        db.query("SELECT * FROM users WHERE email = ?", [email], async (err, result) => {
            if (err) {
                console.error("‚ö†Ô∏è Erreur SQL (V√©rification email) :", err);
                return res.status(500).json({ error: "Erreur serveur lors de la v√©rification de l'email." });
            }

            if (result.length > 0) {
                console.log("‚ö†Ô∏è Email d√©j√† utilis√© :", email);
                return res.status(400).json({ error: "Cet email est d√©j√† utilis√©." });
            }

            try {
                console.log("üîë Hachage et salage du mot de passe...");
                const hashedPassword = await hashPassword(password);
                console.log("‚úÖ Mot de passe hach√© :", hashedPassword);

                // üîµ Ins√©rer l'utilisateur avec `is_actif = 'INACTIVE'`
                db.query(
                    "INSERT INTO users (nickname, email, mdp, is_actif, type_abonnement_id, type_user_id) VALUES (?, ?, ?, ?, ?, ?)",
                    [nickname, email, hashedPassword, "INACTIVE", type_abonnement_id || null, type_user_id || null],
                    (err, result) => {
                        if (err) {
                            console.error("‚ö†Ô∏è Erreur SQL (Insertion utilisateur) :", err);
                            return res.status(500).json({ error: "Erreur serveur lors de l'insertion de l'utilisateur." });
                        }

                        const userId = result.insertId;
                        console.log("‚úÖ Utilisateur ins√©r√© avec ID :", userId);

                        // üü¢ G√©n√©rer et ins√©rer un code de validation
                        const verificationCode = crypto.randomInt(100000, 999999).toString();
                        const createdDate = new Date();
                        const expirationDate = new Date(createdDate.getTime() + 15 * 60 * 1000); // Expiration en 15 min
                        
                        console.log("üìå Code de validation g√©n√©r√© :", verificationCode);
                        console.log("‚è≥ Date d'expiration :", expirationDate);

                        db.query(
                            "INSERT INTO validation (code, created_date, expiration, user_id) VALUES (?, ?, ?, ?)",
                            [verificationCode, createdDate, expirationDate, userId],
                            (err) => {
                                if (err) {
                                    console.error("‚ö†Ô∏è Erreur SQL (Insertion validation) :", err);
                                    return res.status(500).json({ error: "Erreur serveur lors de l'insertion du code de validation." });
                                }

                                console.log("‚úÖ Code de validation ins√©r√© avec succ√®s !");
                                res.status(201).json({ 
                                    message: "Compte cr√©√©. V√©rifiez votre email pour valider votre compte.", 
                                    verificationCode 
                                });
                            }
                        );
                    }
                );
            } catch (error) {
                console.error("‚ö†Ô∏è Erreur interne (Hachage / Encryption) :", error);
                res.status(500).json({ error: "Erreur lors de l'inscription." });
            }
        });
    } catch (error) {
        console.error("‚ö†Ô∏è Erreur interne du serveur :", error);
        res.status(500).json({ error: "Erreur interne du serveur." });
    }
};

exports.loginUser = async (req, res) => {
    try {
        const { email, password } = req.body;

        console.log("üì• Tentative de connexion avec l'email :", email);

        // üîé V√©rifier si l'utilisateur existe
        db.query(
            "SELECT id, email, mdp, is_actif FROM users WHERE email = ? LIMIT 1",
            [email],
            async (err, result) => {
                if (err) {
                    console.error("‚ö†Ô∏è Erreur SQL (V√©rification utilisateur) :", err);
                    return res.status(500).json({ error: "Erreur serveur lors de la r√©cup√©ration de l'utilisateur." });
                }

                if (result.length === 0) {
                    console.log("‚ùå Utilisateur non trouv√© :", email);
                    return res.status(400).json({ error: "Utilisateur non trouv√©." });
                }

                const foundUser = result[0];

                // üîí V√©rifier si le compte est actif
                if (foundUser.is_actif !== "ACTIVE") {
                    return res.status(403).json({ error: "Compte inactif. Veuillez v√©rifier votre email." });
                }

                // üîê V√©rifier le mot de passe
                const isMatch = await verifyPassword(foundUser.mdp, password);
                if (!isMatch) {
                    console.log("‚ùå Mot de passe incorrect pour :", email);
                    return res.status(400).json({ error: "Mot de passe incorrect." });
                }

                // üîë G√©n√©rer un token JWT avec une dur√©e de 48 heures
                const token = jwt.sign({ id: foundUser.id }, process.env.JWT_SECRET, { expiresIn: "48h" });

                console.log("‚úÖ Connexion r√©ussie pour l'utilisateur ID :", foundUser.id);

                // ‚úÖ Retourner le token et l'ID de l'utilisateur
                res.status(200).json({
                    message: "Connexion r√©ussie",
                    token,
                    user_id: foundUser.id,
                });
            }
        );
    } catch (error) {
        console.error("‚ö†Ô∏è Erreur interne du serveur :", error);
        res.status(500).json({ error: "Erreur interne du serveur." });
    }
};

exports.verifyUser = (req, res) => {
    const { email, verificationCode } = req.body;

    console.log("üì© V√©rification du code re√ßu :", { email, verificationCode });

    // üîé V√©rifier l'existence de l'utilisateur
    db.query(
        "SELECT id, is_actif FROM users WHERE email = ? LIMIT 1",
        [email],
        (err, users) => {
            if (err) {
                console.error("‚ö†Ô∏è Erreur SQL (R√©cup√©ration utilisateur) :", err);
                return res.status(500).json({ error: "Erreur serveur lors de la r√©cup√©ration de l'utilisateur." });
            }

            if (users.length === 0) {
                console.log("‚ùå Utilisateur non trouv√© avec l'email :", email);
                return res.status(400).json({ error: "Utilisateur non trouv√©." });
            }

            const foundUser = users[0];

            // ‚úÖ V√©rifier si l'utilisateur est d√©j√† actif
            if (foundUser.is_actif === "ACTIVE") {
                return res.status(400).json({ error: "Le compte est d√©j√† activ√©." });
            }

            // üîé V√©rifier le dernier code de validation
            db.query(
                "SELECT code, expiration FROM validation WHERE user_id = ? ORDER BY created_date DESC LIMIT 1",
                [foundUser.id],
                (err, result) => {
                    if (err) {
                        console.error("‚ö†Ô∏è Erreur SQL (R√©cup√©ration validation) :", err);
                        return res.status(500).json({ error: "Erreur serveur lors de la r√©cup√©ration du code de validation." });
                    }

                    if (result.length === 0) {
                        return res.status(400).json({ error: "Aucun code de validation trouv√©." });
                    }

                    const validation = result[0];

                    // üîç V√©rifier le code
                    if (validation.code !== verificationCode) {
                        console.log("‚ùå Code de validation incorrect :", verificationCode);
                        return res.status(400).json({ error: "Code de validation incorrect." });
                    }

                    // ‚è≥ V√©rifier l'expiration du code
                    if (new Date(validation.expiration) < new Date()) {
                        console.log("‚è≥ Code de validation expir√© :", validation.expiration);
                        return res.status(400).json({ error: "Le code de validation a expir√©." });
                    }

                    // ‚úÖ Activer l'utilisateur
                    db.query(
                        "UPDATE users SET is_actif = 'ACTIVE' WHERE id = ?",
                        [foundUser.id],
                        (err) => {
                            if (err) {
                                console.error("‚ö†Ô∏è Erreur SQL (Activation utilisateur) :", err);
                                return res.status(500).json({ error: "Erreur serveur lors de l'activation du compte." });
                            }

                            console.log("‚úÖ Compte activ√© avec succ√®s pour l'utilisateur ID :", foundUser.id);
                            res.status(200).json({ message: "Compte activ√© avec succ√®s !" });
                        }
                    );
                }
            );
        }
    );
};

exports.getUserStrategies = (req, res) => {
    const userId = req.user.id; // R√©cup√©ration de l'ID utilisateur depuis le token JWT

    console.log(`üì• R√©cup√©ration des strat√©gies pour l'utilisateur ID: ${userId}`);

    // V√©rifier si l'utilisateur est valide
    if (!userId) {
        console.error("‚ùå Erreur: Aucun utilisateur connect√©.");
        return res.status(400).json({ error: "Utilisateur non connect√©." });
    }

    // R√©cup√©rer les strat√©gies de cet utilisateur
    db.query(
        "SELECT * FROM strategies WHERE user_id = ?",
        [userId],
        (err, results) => {
            if (err) {
                console.error("‚ö†Ô∏è Erreur SQL (R√©cup√©ration des strat√©gies) :", err);
                return res.status(500).json({ error: "Erreur serveur lors de la r√©cup√©ration des strat√©gies." });
            }

            console.log(`‚úÖ Strat√©gies r√©cup√©r√©es pour l'utilisateur ${userId}:`, results);
            res.status(200).json(results);
        }
    );
};

exports.getUserSessionBacktest = (req, res) => {
    const userId = req.user.id; // R√©cup√©ration de l'ID utilisateur depuis le token JWT

    console.log(`üì• R√©cup√©ration des session backtest pour l'utilisateur ID: ${userId}`);

    // V√©rifier si l'utilisateur est valide
    if (!userId) {
        console.error("‚ùå Erreur: Aucun utilisateur connect√©.");
        return res.status(400).json({ error: "Utilisateur non connect√©." });
    }

    // R√©cup√©rer les strat√©gies de cet utilisateur
    db.query(
            `SELECT 
                sb.*, 
                a.nom_actif 
            FROM 
                sessions_backtest sb
            LEFT JOIN 
                actifs a 
            ON 
                sb.actif_id = a.id
            WHERE 
                sb.user_id = ?;
            `,
        [userId],
        (err, results) => {
            if (err) {
                console.error("‚ö†Ô∏è Erreur SQL (R√©cup√©ration des session backtest) :", err);
                return res.status(500).json({ error: "Erreur serveur lors de la r√©cup√©ration des session backtest." });
            }

            console.log(`‚úÖ Session backtest r√©cup√©r√©es pour l'utilisateur ${userId}:`, results);
            res.status(200).json(results);
        }
    );
};



